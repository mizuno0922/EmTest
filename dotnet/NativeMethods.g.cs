// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace CsBindgen
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "emarfcore_rs_example";



        [DllImport(__DllName, EntryPoint = "my_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int my_add(int x, int y);

        [DllImport(__DllName, EntryPoint = "construct_point3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern System.IntPtr construct_point3(double x, double y, double z);

        [DllImport(__DllName, EntryPoint = "point3_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void point3_free(System.IntPtr pptr);

        [DllImport(__DllName, EntryPoint = "point3_get_x", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double point3_get_x(System.IntPtr pptr);

        [DllImport(__DllName, EntryPoint = "point3_get_y", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double point3_get_y(System.IntPtr pptr);

        [DllImport(__DllName, EntryPoint = "point3_get_z", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern double point3_get_z(System.IntPtr pptr);

        [DllImport(__DllName, EntryPoint = "free_ptx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_ptx(System.IntPtr pptr);

        [DllImport(__DllName, EntryPoint = "free_pty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_pty(System.IntPtr pptr);

        [DllImport(__DllName, EntryPoint = "free_ptz", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_ptz(System.IntPtr pptr);

        [DllImport(__DllName, EntryPoint = "create_cube", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern System.IntPtr create_cube(double size);

        [DllImport(__DllName, EntryPoint = "free_polygon_mesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_polygon_mesh(System.IntPtr ptr);

        [DllImport(__DllName, EntryPoint = "get_vertices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern float* get_vertices(System.IntPtr mesh_ptr);

        [DllImport(__DllName, EntryPoint = "get_faces", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int* get_faces(System.IntPtr mesh_ptr);

        [DllImport(__DllName, EntryPoint = "get_vertex_count", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int get_vertex_count(System.IntPtr mesh_ptr);

        [DllImport(__DllName, EntryPoint = "get_face_count", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int get_face_count(System.IntPtr mesh_ptr);

        [DllImport(__DllName, EntryPoint = "free_vertices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_vertices(System.IntPtr ptr);

        [DllImport(__DllName, EntryPoint = "free_faces", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_faces(System.IntPtr ptr);


    }



}
